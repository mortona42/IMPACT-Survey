<?php
/**
 * Implements hook_menu().
 */
function imls_data_menu() {
  $items = array();

  $items['profile-imls_data/%profile2_by_uid/verify'] = array(
    'title' => 'Verify Branches',
    'description' => 'Verify Branches',
    'page callback' => 'imls_data_verify_branches',
    'page arguments' => array(1),
    'access callback' => 'imls_data_verify_branches_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  return $items;
}
// Allow access if the user is accessing their own profile or they are an admin with view any rights
function imls_data_verify_branches_access($uid) {
  if(user_is_logged_in() == $uid || user_access('view any imls_data profile'))
    return TRUE;
  else
    return FALSE;
}
function imls_data_verify_branches() {
  $branches = db_query("SELECT * FROM {square_feet} WHERE fscs_key = :fscs ORDER BY lib_name", array(':fscs' => impact_util_fscs()));
  $header = array('Branch Name', 'Address', 'City', 'Zip', 'Square Feet');
  $rows = array();
  
  foreach($branches->fetchAll() as $branch) {
    $sq_feet = ($branch->sq_feet > 0) ? $branch->sq_feet : 'N/A';
    $rows[] = array(
      impact_util_capwords($branch->lib_name),
      impact_util_capwords($branch->address),
      impact_util_capwords($branch->city),
      $branch->zip,
      $sq_feet
    );
  }
  
  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => 'library_form'),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => '',
    'empty' => ''
  );
  
  drupal_set_title('Verify Library Branches');
  $output = '<h3>' . imls_data_num_branches(impact_util_fscs()) . ' Total Branches</h3>';
  $output .= theme('table', $variables);
  return $output;
}
/**
 * @file
 *
 * Creates the registration form that libraries must complete in order to complete registration for the survey.
 *
 */
function imls_data_form_profile2_edit_imls_data_form_alter(&$form, &$form_state) {
  if(impact_util_profile_status('imls_data')) {
    drupal_set_message('You have already submitted this form. Please contact us if you need to make a change.', 'warning');
    drupal_goto(impact_util_profile_view_url());
  }
  // Add link to square feet table
  drupal_add_js(drupal_get_path('module', 'imls_data').'/imls_data.js');
  // Some styling from myimpact_setting.css
  drupal_add_css(drupal_get_path('module', 'myimpact_setting').'/myimpact_setting.css');
  // IMLS_Data style
  drupal_add_css(drupal_get_path('module', 'imls_data').'/imls_data.css');
  
  // Get IMLS Data
  $fscs = token_replace('[current-user:profile-library-registration:field-library-reg-system]');
  $query_system = "SELECT * FROM {library_lookup} WHERE fscs_key = '$fscs'";
  $result_system = db_query($query_system)->fetchObject();
  $imls_data = array (
    'field_legalpop' => $result_system->popu_lsa,
    'field_visits' => $result_system->visits,
    'field_hours' => $result_system->hrs_open,
    'field_expend_tot' => $result_system->tot_op_exp,
    'field_fte' => $result_system->tot_staff,
    'field_terminals' => $result_system->gp_terms,
    'field_pac_uses' => $result_system->pit_usr,
    'field_num_branches' => imls_data_num_branches($fscs)
  );
  
  // Loop through fields and set table elements in prefix/suffix
  // Also set default values
  $zebra = 'even';
  foreach($form['profile_imls_data'] as $field => $values) {
    $field_splode = explode('_', $field);
    if($field_splode[0] == 'field') {
      $zebra = ($form['profile_imls_data'][$field]['#weight']%2 == 0) ? 'even' : 'odd';
      $description = isset($form['profile_imls_data'][$field]['und'][0]['value']['#description']) ? '<br><span class="description">' . $form['profile_imls_data'][$field]['und'][0]['value']['#description'] . '</span>' : '';
      $field_prefix = isset($form['profile_imls_data'][$field]['und'][0]['value']['#field_prefix']) ? $form['profile_imls_data'][$field]['und'][0]['value']['#field_prefix'] : '';
      $field_suffix = isset($form['profile_imls_data'][$field]['und'][0]['value']['#field_suffix']) ? $form['profile_imls_data'][$field]['und'][0]['value']['#field_suffix'] : '';
      $form['profile_imls_data'][$field]['und'][0]['value']['#title_display'] = 'none';
      $form['profile_imls_data'][$field]['und'][0]['#prefix'] = '<tr class="' . $zebra . '"><td class="imls-field-name">' . $form['profile_imls_data'][$field]['und'][0]['value']['#title'] . $description . '</td><td class="imls-prev-data">' . $imls_data[$field] . '</td><td class="imls-field-prefix">' . $field_prefix . '</td><td class="imls-current-value">';
      $form['profile_imls_data'][$field]['und'][0]['#suffix'] = '</td><td class="imls-field-suffix">' . $field_suffix . '</td></tr>';
      if(empty($form['profile_imls_data'][$field]['und'][0]['value']['#default_value']))
        $form['profile_imls_data'][$field]['und'][0]['value']['#default_value'] = $imls_data[$field];
      // Unset fields so that they are not rendered again
      unset($form['profile_imls_data'][$field]['und'][0]['value']['#description']);
      unset($form['profile_imls_data'][$field]['und'][0]['value']['#field_prefix']);
      unset($form['profile_imls_data'][$field]['und'][0]['value']['#field_suffix']);
    }
  }
  // Add verification to number of branches
  $form['profile_imls_data']['field_num_branches']['und'][0]['value']['#element_validate'][] = 'imls_data_validate_num_branches';
  
  $form['profile_imls_data']['#prefix'] = '<table class="library_form"><thead><tr><th class="imls-field-name">Field</th><th class="imls-prev-data">2009 IMLS Data</th><th class="imls-field-prefix"></th><th class="imls-current-value">Updated Value</th><th class="imls-field-suffix"></th></tr></thead><tbody>';
  $form['profile_imls_data']['#suffix'] = '</tbody></table>';
  
  // If branches != IMLS data, display message to contact us (should be email to us)
  $form['#submit'][] = 'imls_data_form_submit';
  
  //dpm($form);
}
function imls_data_form_submit($form, &$form_state) {
  //if 
  //dpm($form_state);
  
}
function imls_data_validate_num_branches($element, &$form_state, $form) {
  if($element['#value'] < 1) {
    form_error($element, t('You need at least one branch.'));
  }
  if($element['#value'] != imls_data_num_branches(impact_util_fscs())) {
    form_error($element, t('You have a different number of branches than we have on record.  You must <a href="/contact">Contact us</a> to continue.'));
  }
}
function imls_data_num_branches($fscs) {
  return db_query("SELECT COUNT(fscs_key) AS count FROM {square_feet} WHERE fscs_key = '$fscs'")->fetch()->count;
}
/*
 function imls_data_form_submit($form, &$form_state) {
 drupal_set_message(t('The changes have been saved.'));
 $form_state['redirect'] = 'myimpact';
 }*/
// Calculate sq feet
function imls_data_calculate_sq_feet($fscs) {
  $outlets = db_select('square_feet', 's')
  ->fields('s', array('lib_name', 'sq_feet'))
  ->condition('fscs_key', $fscs)
  ->execute()
  ->fetchAllAssoc('lib_name');

  $sum = 0;
  $error = 0;
  foreach ($outlets as $outlet) {
    if ($outlet->sq_feet == -1) {
      $error = 1;
    } else if ($outlet->sq_feet > 0) {
      $sum += $outlet->sq_feet;
    }
  }
  if ($error > 0) {
    $message = "One or more of your branches is missing square feet values.  <a href='/square_feet' target='_blank' class='square_feet_link'>Click here</a> to edit branch data.";
    drupal_set_message($message, 'warning', FALSE);
    $sum = 0;
  }
  return $sum;
}
// Add a table header to the saved value output
function imls_data_profile2_view_alter(&$build) {
  //dpm($build);
}
function imls_data_profile2_view($profile, $view_mode, $langcode) {
  // check for imls_data and does not contain 'empty' content
  if($profile->type == 'imls_data') {
    // If the profile is unsubmitted (and not on confirm), go to edit
    if(isset($profile->content['empty'])
    || !impact_util_profile_status('imls_data')
    && impact_util_form_step() != 'confirm') 
      drupal_goto(current_path() . '/edit');
      
    // Get all the fields for imls_data
    $sql = "SELECT field_name, data FROM {field_config_instance} WHERE bundle = 'imls_data'";
    $fields = db_query($sql)->fetchAllKeyed();
    
    // Get the IMLS data for this library
    $fscs = impact_util_fscs();
    $sql = "SELECT * FROM {library_lookup} WHERE fscs_key = :fscs";
    $imls_data = db_query($sql, array(':fscs' => $fscs))->fetch();
    // Format the data in an array we can reference
    $imls_data_fields = array(
      'field_hours' => number_format($imls_data->hrs_open),
      'field_expend_tot' => '$' . number_format($imls_data->tot_op_exp),
      'field_fte' => number_format($imls_data->tot_staff),
      'field_terminals' => number_format($imls_data->gp_terms),
      'field_pac_uses' => number_format($imls_data->pit_usr),
      'field_legalpop' => number_format($imls_data->popu_lsa),
      'field_visits' => number_format($imls_data->visits),
      'field_num_branches' => number_format(imls_data_num_branches($fscs))
    );
    // Create the arrays for the table
    $header = array('Field', '2009 IMLS Data', 'Updated Value');
    $attributes = array('class' => array('library_form'));
    $rows = array();
    foreach($profile->content as $field => $value) {
      $splode = explode('_', $field);
      if($splode[0] == 'field') {
        $weight = unserialize($fields[$field]);
        $rows[$weight['widget']['weight']] = array($value['#title'], $imls_data_fields[$field], $value[0]['#markup']);
      }
    }
    // Sort the rows by key (the field's weight)
    ksort($rows, SORT_NUMERIC);
    
    // The 0 is required for some reason
    $profile->content = array(0 => array('#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes))));
  }
}

/**
 * Implements hook_block_info().
 */
function imls_data_block_info() {
  $blocks['verify_branches_instructions'] = array(
    'info' => t('Verify Branches Instructions'), 
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'profile-imls_data/*/verify'
  );
  $blocks['imls_data_instructions'] = array(
    'info' => t('IMLS Data Instructions'), 
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'profile-imls_data/*/edit'
  );
  $blocks['imls_data_view'] = array(
    'info' => t('IMLS Data View Profile'), 
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -1,
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'profile-imls_data/*'
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function imls_data_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'verify_branches_instructions':
      $block['subject'] = t('');
      $block['content'] = variable_get('imls_data_verify_branches_instructions', 'These are the branches we have on file from the 2009 IMLS Dataset.  Please <a href="/contact">contact us</a> if there are any inaccuracies.');
      break;
    case 'imls_data_instructions':
      $block['subject'] = t('');
      // If they have saved, inform them that they must submit, otherwise tell them that they must contact us to change
      if(impact_util_profile_save('imls_data'))
        $block['content'] = variable_get('imls_data_form_saved', 'Your form is saved, please submit it when you are finished.');
      else
        $block['content'] = variable_get('imls_data_form_instructions', 'The following fields are pre-populated with information your library has reported to the Institute for Museum and Library Services (IMLS). Please make any necessary updates, confirm the information is correct, and click "submit."');
      break;
    case 'imls_data_view':
      $block['subject'] = t('');
      // Hide block on edit, verify, confirm, delete pages
      $form_step = impact_util_form_step();
      if ($form_step == 'edit' || $form_step == 'verify' || $form_step == 'confirm' || $form_step == 'delete')
        $block['content'] = '';
      else
        $block['content'] = variable_get('imls_data_view', 'You have submitted your IMLS Data form.  Please <a href="/contact">contact us</a> if you need to make a change.');
      break;
  }
  return $block;
}
/**
 * Implements hook_block_configure().
 */
function imls_data_block_configure($delta = '') {
  $form = array();
  switch($delta) {
    case 'verify_branches_instructions':
      $form['body'] = array(
        '#type' => 'textarea', 
        '#title' => t('Body'), 
        '#default_value' => variable_get('imls_data_verify_branches_instructions', 'These are the branches we have on file from the 2009 IMLS Dataset.  Please <a href="/contact">contact us</a> if there are any inaccuracies.'),
      );
      break;
    case 'imls_data_instructions':
      $form['instructions'] = array(
        '#type' => 'textarea', 
        '#title' => t('Empty form instructions'), 
        '#default_value' => variable_get('imls_data_form_instructions', 'The following fields are pre-populated with information your library has reported to the Institute for Museum and Library Services (IMLS). Please make any necessary updates, confirm the information is correct, and click "submit."'),
       );
      $form['saved'] = array(
        '#type' => 'textarea', 
        '#title' => t('Saved form instructions'), 
        '#default_value' => variable_get('imls_data_form_saved', 'Your form is saved, please submit it when you are finished.'),
       );
       break;
    case 'imls_data_view':
      $form['body'] = array(
        '#type' => 'textarea', 
        '#title' => t('Body'), 
        '#default_value' => variable_get('imls_data_view', 'You have submitted your IMLS Data form.  Please <a href="/contact">contact us</a> if you need to make a change.'),
       );
       break;
  }
  return $form;
}
/**
 * Implements hook_block_save().
 */
function imls_data_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'verify_branches_instructions':
      variable_set('imls_data_verify_branches_instructions', $edit['body']);
      break;
    case 'imls_data_instructions':
      variable_set('imls_data_form_instructions', $edit['instructions']);
      variable_set('imls_data_form_saved', $edit['saved']);
      break;
    case 'imls_data_view':
      variable_set('imls_data_view', $edit['body']);
      break;
  }
}