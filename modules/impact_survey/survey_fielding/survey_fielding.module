<?php
// Menu item for extending survey
function survey_fielding_menu() {
  $items['profile-survey_fielding/%/extend'] = array(
			'title' => 'Extend Survey Fielding',
			'page callback' => 'survey_fielding_extend',
			'access callback' => 'user_access',
			'access arguments' => array('edit own survey_fielding profile'),
			'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

//Implement the survey fielding status: Not Ready, Empty, Selected, Running, Ended
function survey_fielding_menu_alter(&$items){
  $items['profile-survey_fielding']['title callback'] = 'survey_fielding_title';
  if(isset($items['profile-survey_fielding'])) 
    unset($items['profile-survey_fielding']['file']);
  $items['profile-survey_fielding']['page callback'] = 'survey_fielding_new_page';
}
function survey_fielding_title() {
  return 'Survey Fielding';
}

// Email user after choosing dates
function survey_fielding_trigger_info() {
  return array(
		'survey_fielding' => array (
			'content_submit' => array (
				'label' => t('After saving or changing the Fielding Dates Form'),
      ),
    ),
  );
}

// Override submit and validate functions in survey fielding form
// Return to view if they have already submitted
function survey_fielding_form_profile2_edit_survey_fielding_form_alter(&$form, &$form_state) {
  if(impact_util_profile_save('survey_fielding') && strtotime(survey_fielding_start_date()) < time())
    drupal_goto('profile-survey_fielding');
  $form['profile_survey_fielding']['field_paper_survey']['und']['#default_value'] = survey_fielding_paper_survey_value();
  $form['#submit'][1] = 'survey_fielding_submit';
  $form['#validate'][1] = 'survey_fielding_validate';
}

// Ensure submitted dates are valid
function survey_fielding_validate($form, &$form_state){
  //delete all the default error messages because the default one, say "Field value #1 is required", is not very understandable and friendly
  drupal_get_messages('error');

  $start = strtotime($form_state['values']['profile_survey_fielding']['field_fielding_date']['und']['0']['value']);
  $end = strtotime($form_state['values']['profile_survey_fielding']['field_fielding_date']['und']['0']['value2']);
  
  if($start < time () && !empty($start))
    form_set_error('profile_survey_fielding','The start date must be after the current date');
  	
  if(empty($start))
    form_set_error('profile_survey_fielding',"Please use the <font color='green' size='3px'>pop-up calendar</font> (recommended), or input in the correct format, i.e. May 16 2011");
  
  if($end <= $start && !empty($start))
    form_set_error('profile_survey_fielding', 'The start date must be before the end date (if your end date is correct, please check that your format matches the format of May 6 2011, or use the pop-up calendar.)');

  if($start > strtotime('9/12/2011'))
    form_set_error('profile_survey_fielding', 'For our pilot test, we require you to start no later than September 12th.');
    
  if($end > strtotime('10/3/2011'))
    form_set_error('profile_survey_fielding', 'For our pilot test, we require you to end no later than October 3rd.');
  
  if(($end - $start)/60/60/24 > 27)
    form_set_error('profile_survey_fielding', 'You may not run the survey for more than 4 weeks.');
}

/**
 * Submit handler for the profile2_edit_survey_fielding_form
 *
 * @param $form
 * @param $form_state
 */
function survey_fielding_submit($form, &$form_state){
  drupal_set_message('Your fielding dates have been changed.  A confirmation email has been sent.');
  module_invoke_all('send_action', 'NULL', 'NULL');
  $form_state['redirect'] = 'profile-survey_fielding';
}

/**
 * Do the action when the form is submitted
 *
 * object $account user object that has logged in.
 * $context
 */
function survey_fielding_send_action($object, $context){
  // Get all assigned actions for the 'content_submit' trigger.
  $aids=trigger_get_assigned_actions('content_submit');

  global $user;
  $account = user_load($user->uid);

  // prepare a basic context, indicating group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'survey_fielding', 
    'hook' => 'contest_submit',
  );
   
  //do actions
  actions_do(array_keys($aids),$account,$context);
}

/*
 * Define a form.
 */
function survey_fielding_nameform() {
  $date = date('Y-m-d', strtotime(survey_fielding_end_date()));
  $format = 'M j Y';
  $form['date2'] = array(
     '#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
     '#title' => 'Stop date',
     '#default_value' => $date, 
     '#date_format' => $format,
     '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
     '#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
     '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
     '#date_year_range' => '0:+1', // Optional, used to set the year range (back 3 years and forward 3 years is the default).	
  );
  $form['paper_survey'] = array (
      '#title' => 'Paper Survey',
      '#description' => 'If you would like to supplement the online survey by offering a paper version, check this box.',
      '#type' => 'checkbox',
      '#default_value' => survey_fielding_paper_survey_value(),
      '#on_value' => 1,
      '#off_value' => 0,
      '#value_key' => 'value'
  );
  $form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit')
  );
  return $form;
}
// Validate the form
function survey_fielding_nameform_validate($form, &$form_state) {
  if (empty($form_state['values']['date2'])){
    form_set_error('user_name',t('Please use the date popup to select a new end date'));
  }
  if(strtotime($form_state['values']['date2'])<=time()){
    form_set_error('user_name', t('The selected end date is earlier than the start date'));
  }
  $end = strtotime($form_state['values']['date2']);
  if($end > strtotime('10/3/2011'))
    form_set_error('profile_survey_fielding', 'For our pilot test, we require you to end no later than October 3rd.');
}

function survey_fielding_nameform_submit($form_id, $form_state) {
  $date = $form_state['values']['date2'];
  $date = strtotime($date);

  $date = format_date($date, 'custom', 'c');
  $date = substr($date, 0, 19);

  global $user;
  $uid = $user->uid;
  $sql = "SELECT pid FROM {profile} WHERE uid = $uid AND type = 'survey_fielding'";
  $result = db_query($sql)->fetchField();

  // Update end date
  $updated = db_update('field_data_field_fielding_date')
  ->fields(array('field_fielding_date_value2' => $date,))
  ->condition('entity_id', $result, '=')
  ->execute();
  // Update paper survey choice
  $updated_paper = db_update('field_data_field_paper_survey')
  ->fields(array('field_paper_survey_value' => $form_state['values']['paper_survey']))
  ->condition('entity_id', $result, '=')
  ->execute();
  
  

  drupal_set_message('Your fielding dates have been changed.  A confirmation email has been sent.');
  //added the trigger
  module_invoke_all('send_action','NULL', 'NULL');
   
  drupal_goto('profile-survey_fielding');
}

/**
 * Implements hook_theme().
 */
function survey_fielding_theme() {
  return array(
    'survey_fielding' => array(
      'template' => 'survey_fielding',
    ),
  );
}

/**
 * Page callback.
 *
 *
 */
function survey_fielding_new_page() {
  $imls = impact_util_profile_status('imls_data');
  $intake = impact_util_profile_status('pilot_intake');
  if(!impact_util_profile_save('survey_fielding') && !empty($imls) && !empty($intake)) {
    global $user;
    drupal_goto("profile-survey_fielding/$user->uid/edit");
  }
  return '';
}

function survey_fielding_extend(){

  global $user;
  $uid=$user->uid;
  //Get the Date

  
  $date1 = survey_fielding_start_date();
  $date2 = survey_fielding_end_date();


  //$date1=date('Y-m-d',$date1);
  //$date2=date('Y-m-d H:i:s',$date2);
  //$get_form=array('survey_fielding_nameform','11','2');

  $form = drupal_get_form('survey_fielding_nameform', $date1, $date2);

  $date2 = render($form);

  $output = "$date2";

  $content = array(
			'output'=>$output,
  );

  return theme('survey_fielding', $content);
}

function survey_fielding_edit_title(){
  drupal_set_title(t('Survey Fielding'));
}

/**
 * Implements hook_token_info().
 */
function survey_fielding_token_info() {
  $info['types']['survey-fielding'] = array(
    'name' => t('Survey Fielding'),
    'description' => t('Tokens that retrieve data from survey fielding')
  );
  $info['tokens']['survey-fielding']['date-range'] = array(
    'name' => t('User Survey Field'),
    'description' => t('Get the survey field date.')
  );
  $info['tokens']['survey-fielding']['survey-count'] = array(
    'name' => t('Survey Count'),
    'description' => t('Number of survey responses')
  );
  $info['tokens']['survey-fielding']['response/s'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['start-date'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['end-date'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['onclick-change'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['onclick-extend'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['paper-survey'] = array(
    'name' => t('response(s)'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['data-entry-url'] = array(
    'name' => t('Data Entry URL'),
    'description' => t('Text for 1 or more response')
  );
  $info['tokens']['survey-fielding']['paper-survey-url'] = array(
    'name' => t('Paper Survey URL'),
    'description' => t('URL for customized paper survey'),
  );
  $info['tokens']['survey-fielding']['incomplete-forms'] = array(
    'name' => t('Incomplete Forms'),
    'description' => t('Text to display when IMLS/Intake forms are incomplete'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function survey_fielding_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();

  if ($type == 'survey-fielding'){
    global $user;
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'date-range':
          $replacements[$original] = survey_fielding_dates();
          break;
        case 'survey-count':
          $replacements[$original] = survey_fielding_response_count();
          break;
        case 'response/s':
          $replacements[$original] = survey_fielding_response_plur();
          break;
        case 'start-date':
          $replacements[$original] = survey_fielding_start_date();
          break;
        case 'end-date':
          $replacements[$original] = survey_fielding_end_date();
          break;
        case 'onclick-change':
          $replacements[$original] = 'onclick="window.location.href=\'/profile-survey_fielding/' . $user->uid . '/edit\'"';
          break;
        case 'onclick-extend':
          $replacements[$original] = 'onclick="window.location.href=\'/profile-survey_fielding/' . $user->uid . '/extend\'"';
          break;
        case 'paper-survey':
          $replacements[$original] = survey_fielding_paper_survey();
          break;
        case 'data-entry-url':
          $replacements[$original] = 'http://impactsurvey.org/dataentry/?fscs=' . impact_util_fscs();
          break;
        case 'paper-survey-url':
          $replacements[$original] = 'http://impactsurvey.org/papersurvey/?fscs=' . impact_util_fscs();
          break;
        case 'incomplete-forms':
          $replacements[$original] = survey_fielding_incomplete_forms();
          break;
      }
    }
  }
  return $replacements;
}
// Returns the count of survey responses for the current user
function survey_fielding_response_count() {
  $sql = 'SELECT COUNT(*) AS responses FROM {survey_responses} WHERE libid = :fscs';
  return db_query($sql, array(':fscs' => impact_util_fscs()))->fetchField();
}
// Returns 'responses' if there is more than 1 response
function survey_fielding_response_plur() {
  if(survey_fielding_response_count() > 1) return 'responses';
  else return 'response';
}
// Returns the users fielding dates formatted as a range
function survey_fielding_dates() {
  $dates = survey_fielding_get_dates();
  if($dates['start'] != '' && $dates['end'] != '' )
    return date('n/j/Y', $dates['start']) . ' - ' . date('n/j/Y', $dates['end']);
  else return '';
}
// Returns a formatted end date
function survey_fielding_end_date() {
  $dates = survey_fielding_get_dates();
  if($dates['end'] != '')
    return date('l n/j/Y', $dates['end']);
  else return '';
}
// Returns a formatted start date
function survey_fielding_start_date() {
  $dates = survey_fielding_get_dates();
  if($dates['start'] != '')
    return date('l n/j/Y', $dates['start']);
  else return '';
}
// Returns whether the user selected to administer paper surveys
function survey_fielding_paper_survey() {
	if(survey_fielding_paper_survey_value() == 1) {
	  $print_url = '<a href="http://impactsurvey.org/papersurvey/?fscs=' . impact_util_fscs() . '">Download your printable paper survey.</a>';
	  $entry_url = '<a href="http://impactsurvey.org/dataentry/?fscs=' . impact_util_fscs() . '">Click here to enter paper survey data.</a>';
	  $output = '<h3>You have chosen to administer paper surveys</h3>';
	  $output .= $print_url . '<br>' . $entry_url . '<br>';
	  return $output;
	}
	else return '<h3>You have chosen not to administer paper surveys</h3>';
}
// Returns whether the user selected to administer paper surveys
function survey_fielding_paper_survey_value() {
  global $user;
  $sql = "SELECT field_paper_survey_value
	   FROM {field_data_field_paper_survey} AS a, 
	   {profile} AS b WHERE a.entity_id=b.pid AND b.uid = $user->uid";
	return db_query($sql)->fetchField();
}
// Returns array of start and end dates
function survey_fielding_get_dates(){
  global $user;
  $uid = $user->uid;
  //get the fielding dates from field_data_field_fielding_date
  $sql = 'SELECT field_fielding_date_value AS start_date,
	   field_fielding_date_value2 AS end_date 
	   FROM {field_data_field_fielding_date} AS a, 
	   {profile} AS b WHERE a.entity_id=b.pid AND b.uid=:uid';
  $result = db_query($sql, array('uid'=>$uid))->fetch();
  return ($result)
    ? array('start' => strtotime($result->start_date), 'end' => strtotime($result->end_date))
    : array('start' => '', 'end' => '');
}
function survey_fielding_incomplete_forms() {
  $imls = impact_util_profile_status('imls_data');
  $intake = impact_util_profile_status('pilot_intake');
  if(empty($imls) && empty($intake)) return '<a href="profile-imls_data">IMLS Data</a> and <a href="profile-pilot_intake">Intake</a> forms';
  else if(empty($imls) && !empty($intake)) return '<a href="profile-imls_data">IMLS Data</a> form';
  else if(!empty($imls) && empty($intake)) return '<a href="profile-pilot_intake">Intake</a> form';
}