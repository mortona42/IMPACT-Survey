<?php
// A better version of ucwords that capitalizes just the first word,
// regardless of the previous case. Also it capitalizes the first word
// after an array of delimiters.
// Accepts $string - the string to be capitalized
// Accepts option $delimiters - an array of characters to trigger capitalization
function impact_util_capwords($string, $delimiters = array('-','/', ' '))
{
   $string = strtolower(htmlentities($string));
   $delimiters = array ('-', '/', ' ');
   foreach ($delimiters as $delim) 
   {
      $string = explode($delim, $string);
      foreach ($string as $index=>$capword) 
      {
         if (strlen($capword) > 0) 
         {
                 $capword[0] = strtoupper($capword[0]);
         }       
         $string[$index] = ($capword);
      }
      $string = implode($delim, $string);
   }
   return $string;
}

// Get the current user's fscs key
// If $uid is empty, return the current user's fscs key
// Otherwise, return the fscs key for the given $uid
function impact_util_fscs($uid = 0) {
	if($uid == 0)
  	return token_replace('[current-user:profile-library-registration:field-library-reg-system]');
  else {
  	$sql = "SELECT sys.field_library_reg_system_value AS fscs_key
FROM {field_data_field_library_reg_system} AS sys
JOIN {profile} p ON sys.entity_id = p.pid
JOIN {users} u ON p.uid = u.uid
WHERE u.uid = '$uid'";
  	return db_query($sql)->fetchField();
  }
}
// Determine weather the current user's profile (imls or intake) is submitted or not
function impact_util_profile_status($type) {
  global $user;
  $sql = "SELECT pid FROM {myimpact_profile_status} WHERE type = '$type' AND uid = '$user->uid'";
  return db_query($sql)->fetchField();
}
// Determine whether the current user's profile (imls or intake) is saved or not
function impact_util_profile_save($type) {
  global $user;
  $sql = "SELECT pid FROM {profile} WHERE type = '$type' AND uid = '$user->uid'";
  return db_query($sql)->fetchField();
}
// Determine which step in a form the user is on
function impact_util_form_step() {
  $url = explode('/', current_path());
  return $url[count($url)-1];
}
// Determine which user a form is for based on the url
function impact_util_user_url() {
  $url = explode('/', current_path());
  return $url[count($url)-2];
}
// Url to return a user to view page
function impact_util_profile_view_url() {
  global $base_url;
  $url = explode('/', current_path());
  return $base_url . '/' . $url[count($url)-3] . '/' . $url[count($url)-2];
}
// Check if The library is administering paper surveys
// Returns 1 if yes, 0 if no
function impact_util_paper_survey() {
  global $user;
  $paper = impact_util_profile_save('survey_fielding');
  if($paper) {
    $sql = "SELECT field_paper_survey_value FROM {field_data_field_paper_survey} WHERE entity_id = '$paper'";
    return db_query($sql)->fetchField();
  } else
    return 0;
}
function impact_util_paper_survey_finished() {
  global $user;
  $sql = "SELECT paper_survey_finished FROM {paper_survey_finished} WHERE uid = $user->uid";
  return db_query($sql)->fetchField();
}
// Get the current library's state
function impact_util_get_state() {
  return token_replace('[current-user:profile-library-registration:field-library-reg-state]');
}
// Returns a formatted start date
function impact_util_start_date($uid = 0) {
  $dates = impact_util_get_dates($uid);
  if($dates['start'] != '')
    return date('l n/j/Y', $dates['start']);
  else return '';
}
// Returns a formatted end date
function impact_util_end_date($uid = 0) {
  $dates = impact_util_get_dates($uid);
  if($dates['end'] != '')
    return date('l n/j/Y', $dates['end']);
  else return '';
}
// Returns array of start and end dates
function impact_util_get_dates($uid = 0){
  if($uid == 0) {
    global $user;
    $uid = $user->uid;
  }
  //get the fielding dates from field_data_field_fielding_date
  $sql = 'SELECT field_fielding_date_value AS start_date,
	   field_fielding_date_value2 AS end_date 
	   FROM {field_data_field_fielding_date} AS a, 
	   {profile} AS b WHERE a.entity_id=b.pid AND b.uid=:uid';
  $result = db_query($sql, array('uid'=>$uid))->fetch();
  return ($result)
    ? array('start' => strtotime($result->start_date), 'end' => strtotime($result->end_date))
    : array('start' => '', 'end' => '');
}