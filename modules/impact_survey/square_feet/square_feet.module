<?php
/**
 * Implements hook_menu().
 */
function square_feet_menu() {
  $items = array();

  $items['sqft'] = array(
    'title' => 'sqft',
    'description' => 'sqft',
    'page callback' => 'square_feet_user',
    'access callback' => TRUE
  );
  $items['missing'] = array(
    'title' => 'missing',
    'description' => 'missing',
    'page callback' => 'square_feet_missing',
    'access callback' => TRUE
  );
  $items['sqft/%'] = array(
    'title' => 'test',
    'description' => 'test',
    'page callback' => 'square_feet_test',
    'page arguments' => array(1),
    'access callback' => TRUE
  );
  $items['branches'] = array(
    'title' => 'Verify Branches',
    'description' => 'Do we have all your branches?',
    'page callback' => 'square_feet_verify_branches_user',
    'access callback' => TRUE
  );
  $items['branches/%'] = array(
    'title' => 'Verify Branches (Test)',
    'description' => 'Do we have all your branches?',
    'page callback' => 'square_feet_verify_branches',
    'page arguments' => array(1),
    'access callback' => TRUE
  );
  
  $items['profile-imls_data/%profile2_by_uid/verify'] = array(
    'title' => 'Verify sq ft',
    'description' => 'Verify square feet',
    'page callback' => 'square_feet_verify',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  
  return $items;
}
function square_feet_verify($imls_profile) {
  $reg_query = "SELECT pid FROM {profile} WHERE uid = $imls_profile->uid AND type = 'library_registration'";
  $reg_value = db_query($reg_query)->fetch();
  //dpm($reg_value);
  
  $fscs_query = "SELECT field_library_reg_system_value FROM {field_data_field_library_reg_system} WHERE entity_id = $reg_value->pid";
  $fscs = db_query($fscs_query)->fetch();
  //dpm($fscs);
  
  drupal_set_title('Verify Branches & sq ft');
  //$query = "SELECT f.field_library_reg_system_value FROM {profile} p JOIN {field_data_field_library_reg_system} WHERE entity_id = :pid";
  //$fscs = db_query($query, array(':pid' => $uid->pid))->fetchAll();
  //dpm($fscs);
  
  $fscs = token_replace('[current-user:profile-library-registration:field-library-reg-system]');
  $branches = square_feet_form_get_records($fscs);
  
  $valid_branches = array();
  $missing_branches = array();
  
  // Seperate good and bad values
  foreach($branches as $branch) {
    $field_value = isset($branch->new_sq_feet) ? $branch->new_sq_feet : $branch->old_sq_feet;
    if($field_value < 1) {
      $missing_branches[] = $branch;
    }
    else {
      $valid_branches[] = $branch;
    }
  }
  //dpm($missing_branches);
  //dpm($valid_branches);
  
  return drupal_get_form('square_feet_verify_form', $missing_branches, $valid_branches);
}
function square_feet_verify_form($form, &$form_state, $missing_branches, $valid_branches) {
  $form = array();
  $count = 0;
  
  $form['missing'] = array(
    '#type' => 'container',
    '#prefix' => '<h3>Missing Data</h3><table><tr><th>Library Name</th><th>2008 IMLS Data</th><th>Current Value</th></tr>',
    '#suffix' => '</table>',
    '#tree' => TRUE,
    '#weight' => 1
  );
  foreach($missing_branches as $branch) {
    $count++;
    $field_value = isset($branch->new_sq_feet) ? $branch->new_sq_feet : $branch->old_sq_feet;
    
    $form['missing'][$branch->id] = array(
      '#type' => 'textfield',
      '#prefix' => '<tr><td>' . capwords($branch->lib_name) . '</td><td>0</td><td>',
      '#suffix' => '</td></tr>',
      '#default_value' => 0,
    );
  }
  
  $form['valid'] = array(
    '#type' => 'container',
    '#prefix' => '<h3>Valid Data</h3><table><tr><th>Library Name</th><th>2008 IMLS Data</th><th>Current Value</th></tr>',
    '#suffix' => '</table>',
    '#tree' => TRUE,
    '#weight' => 3
  );
  foreach($valid_branches as $branch) {
    $count++;
    $field_value = isset($branch->new_sq_feet) ? $branch->new_sq_feet : $branch->old_sq_feet;
    
    $form['valid'][$branch->id] = array(
      '#type' => 'textfield',
      '#prefix' => '<tr><td>' . capwords($branch->lib_name) . "</td><td>$branch->old_sq_feet</td><td>",
      '#suffix' => '</td></tr>',
      '#default_value' => $field_value,
    );
  }
  
  $form['count'] = array(
    '#markup' => "<h4>$count total branches</h4>",
    '#weight' => 0
  );
  
  $form['submit top'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 2
  );
  $form['submit bottom'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 4
  );
  
  return $form;
}

function square_feet_verify_branches_user() {
  $fscs = 'HI0001';//token_replace('[current-user:profile-library-registration:field-library-reg-system]');
  return square_feet_verify_branches($fscs);
}
function square_feet_verify_branches($fscs) {
  drupal_set_title('Verify Branches');
  $branches = square_feet_fetch_branches($fscs);
  $output = '<ul>';
  $count = 0;
  foreach($branches as $branch) {
    $count++;
    $output .= '<li>'.capwords($branch->lib_name).'</li>';
  }
  $output .= '</ul>';
  
  $output = "<h3>$count total branches</h3></br>" . $output;
  return $output;
}

function square_feet_user() {
  $fscs = 'HI0001';//token_replace('[current-user:profile-library-registration:field-library-reg-system]');
  $records = square_feet_form_get_records($fscs);
  drupal_set_title('Edit All Square Feet Values');
  return drupal_get_form('square_feet_form', $records, NULL);
}

function square_feet_test($fscs) {
  $records = square_feet_form_get_records($fscs);
  return drupal_get_form('square_feet_form', $records, NULL);
}
// Display a form for missing sq ft values, followed by a table with good values
function square_feet_missing() {
  drupal_set_title('Enter Missing SQ FT Values');
  $records = square_feet_form_get_records('HI0001');
  $valid_branches = array();
  $missing_branches = array();
  
  // Seperate good and bad values
  foreach($records as $branch) {
    $field_value = isset($branch->new_sq_feet) ? $branch->new_sq_feet : $branch->old_sq_feet;
    if($field_value < 1) {
      $missing_branches[] = $branch;
    }
    else {
      $valid_branches[] = $branch;
    }
  }
  $header = array(
    'Library Name',
    '2008 IMLS Data',
    'Current Value'
  );
  $rows = array();
  foreach($valid_branches as $branch) {
    $rows[] = array($branch->lib_name, $branch->old_sq_feet, $branch->new_sq_feet);
  }
  $table = theme('table', array('header' => $header, 'rows' => $rows));
  $output = drupal_get_form('square_feet_form', $missing_branches, $table);
  
  return $output;
}

// Returns branch info for a given fscs key
function square_feet_fetch_branches($fscs) {
  $branches = 'SELECT id, lib_name FROM {square_feet} WHERE fscs_key = :fscs ORDER BY lib_name';
  $branches = db_query($branches, array(':fscs' => $fscs));

  return $branches->fetchAll();
}
/**
 * Implements hook_form().
 */
function square_feet_form($form, &$form_state, $branches, $table = NULL) {
  // might as well fix this!
  $records = $branches;
  
  $form['square_feet'] = array(
    '#type' => 'container',
    '#prefix' => '<table><tr><th>Library Name</th><th>2008 IMLS Data</th><th>Current Value</th></tr>',
    '#suffix' => '</table>',
    '#tree' => TRUE
  );
  
  foreach($records as $branch) {
    $field_value = isset($branch->new_sq_feet) ? $branch->new_sq_feet : $branch->old_sq_feet;
    
    $form['square_feet'][$branch->id] = array(
      '#type' => 'textfield',
      '#prefix' => "<tr><td>$branch->lib_name</td><td>$branch->old_sq_feet</td><td>",
      '#suffix' => '</td></tr>',
      '#default_value' => $field_value,
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#suffix' => $table  // $table is output from theme('table') to attach to the end of the form for reference
  );
  
  return $form;
}
// Submit function for the square feet verify form
// Creates records for every branch in the library system
// If these values exist in the database, reference them before using older values
function square_feet_verify_form_submit($form, &$form_state) {
  // Would be good to combine these two loops, might be a matter of not making the form values a tree
  // Submit missing values (check is needed to avoid error when none are missing)
  if(isset($form_state['values']['missing'])) {
    foreach($form_state['values']['missing'] as $branch_id => $sq_feet) {
      // check for bookmobiles/missing data
      if($sq_feet >= 0) {
        db_merge('library_branch')
          ->key(array('branch_id' => $branch_id))
          ->fields(array(
          		'sq_feet' => $sq_feet,
            ))
          ->execute();
      }else {
        drupal_set_message('invalid data in invalid branch', 'warning');
      }
    }
  }
  // Submit valid values (check is needed to avoid error when none are valid)
  if(isset($form_state['values']['valid'])) {
    foreach($form_state['values']['valid'] as $branch_id => $sq_feet) {
      // check for bookmobiles/missing data
      if($sq_feet >= 0) {
        db_merge('library_branch')
          ->key(array('branch_id' => $branch_id))
          ->fields(array(
          		'sq_feet' => $sq_feet,
            ))
          ->execute();
      }else {
        drupal_set_message('invalid data in valid branch', 'warning');
      }
    }
  }
  //return 'asdf';
}
// returns an array of branches for a given fscs key
function square_feet_form_get_records($fscs) {
  $imls_query = "SELECT s.id, s.lib_name, s.sq_feet AS 'old_sq_feet', l.sq_feet AS 'new_sq_feet' FROM {square_feet} s LEFT JOIN {library_branch} l ON s.id = l.branch_id WHERE fscs_key = :fscs ORDER BY s.lib_name";
  $imls_records = db_query($imls_query, array(':fscs' => $fscs));
  $imls_branches = $imls_records->fetchAll();
  //dpm($imls_branches);
  return $imls_branches;
}

// capwords should be moved to somewhere it can be reused

// A better version of ucwords that capitalizes just the first word, regardless 
// of the previous case. It also capitalizes the first word after an array of delimiters.
// @$string - the string to be capitalized
// @$delimiters  (optional) - an array of characters that should be followed by a capital letter
// This function accomplishes a similar task to ucwords(strtolower("Some string"))
function capwords($string, $delimiters = array('-','/','(', ' ')) {
$string = strtolower($string);
foreach ($delimiters as $delim) {
$string = explode($delim, $string);
foreach ($string as $index=>$capword) {
  $string[$index] = ucfirst($capword);
}
$string = implode($delim, $string);
}
return $string;
}
